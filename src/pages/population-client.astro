---
import Layout from "../layouts/Layout.astro";
import population from "../assets/population.json";

// menus (côté serveur)
const annees = [...new Set(population.map(d => d["Période"]))].sort((a,b)=>b-a);
const sexes  = [...new Set(population.map(d => d["Sexe"]))];
const ages   = [...new Set(population.map(d => d["Âge"]))];

const anneeDef = annees[0];
---

<Layout title="TP7 — Population (client)">
  <h1 class="text-2xl mb-4">Population — filtres (année / sexe / âge)</h1>

  <form class="flex flex-wrap gap-4 items-end mb-4">
    <label class="flex flex-col gap-1">
      <span>Année</span>
      <select id="periode" class="px-3 py-2 rounded border">
        {annees.map((y, i) => <option value={y} selected={i===0}>{y}</option>)}
      </select>
    </label>

    <label class="flex flex-col gap-1">
      <span>Sexe</span>
      <select id="sexe" class="px-3 py-2 rounded border">
        <option value="">Tous</option>
        {sexes.map(s => <option value={s}>{s}</option>)}
      </select>
    </label>

    <label class="flex flex-col gap-1">
      <span>Âge</span>
      <select id="age" class="px-3 py-2 rounded border">
        <option value="">Tous</option>
        {ages.map(a => <option value={a}>{a}</option>)}
      </select>
    </label>
  </form>

  <div id="vis" class="rounded-xl overflow-hidden border min-h-[460px]"></div>

  <script type="module">
    import * as Plot from "@observablehq/plot";
    import raw from "../assets/population.json";

    const data = raw.map(d => ({ ...d, Valeur: +d["Valeur"] || 0 }));

    const $vis = document.querySelector("#vis");
    const $y = document.querySelector("#periode");
    const $s = document.querySelector("#sexe");
    const $a = document.querySelector("#age");

    function filtered() {
      const y = Number($y.value);
      const s = $s.value;
      const a = $a.value;
      return data.filter(d =>
        d["Période"] === y &&
        (s === "" || d["Sexe"] === s) &&
        (a === "" || String(d["Âge"]) === String(a))
      );
    }

    function render() {
      const rows = filtered();

      // S’il n’y a que “Total/Total”, on agrège par département
      const simple = rows.every(d => d["Sexe"] === "Total" && d["Âge"] === "Total");

      let table;
      if (simple) {
        table = rows
          .map(d => ({ dep: d["Géographie"], val: d["Valeur"] }))
          .sort((a,b)=>b.val-a.val)
          .slice(0, 30);
      } else {
        // sinon on laisse par âge et/ou sexe
        table = rows.map(d => ({
          dep: d["Géographie"], age: d["Âge"], sexe: d["Sexe"], val: d["Valeur"]
        }));
      }

      $vis.innerHTML = "";
      const plot = Plot.plot({
        title: simple
          ? `Population par département — Top 30`
          : `Population (détail)`,
        ariaLabel: "Histogramme filtrable de population",
        height: 520,
        marginLeft: 100,
        x: { label: simple ? "Département" : "Âge", tickRotate: -45 },
        y: { label: "Population", grid: true, tickFormat: d => d.toLocaleString("fr-FR") },
        color: simple ? undefined : { label:"Sexe", legend:true, scheme:"Tableau10" },
        marks: simple
          ? [ Plot.barY(table, { x:"dep", y:"val", tip:true }), Plot.ruleY([0]) ]
          : [ Plot.barY(table, { x:"age", y:"val", fill:"sexe", tip:true }), Plot.ruleY([0]) ]
      });
      $vis.append(plot);
    }

    $y.addEventListener("change", render);
    $s.addEventListener("change", render);
    $a.addEventListener("change", render);
    render();
  </script>
</Layout>
