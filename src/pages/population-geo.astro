---
import Layout from "../layouts/Layout.astro";

import detailPopRaw from "../assets/detail_pop.json";

const dataSrv = detailPopRaw.map(d => ({
  ...d,
  Période: +d["Période"],
  Valeur:  +d["Valeur"] || 0,
  Sexe:    String(d["Sexe"] ?? "").trim(),
  Âge:     String(d["Âge"] ?? "").trim(),
  Géographie: String(d["Géographie"] ?? "").trim(),
}));

const periodes = [...new Set(dataSrv.map(d => d.Période))].sort((a,b)=>b-a);
const sexes    = [...new Set(dataSrv.map(d => d.Sexe))];
const ages     = [...new Set(dataSrv.map(d => d["Âge"]))];

const defaultYear = periodes[0];
const defaultSex  = sexes.includes("Total") ? "Total" : sexes[0];
const defaultAge  = ages.includes("Total")  ? "Total"  : ages[0];
---

<Layout title="Population — carte par département">
  <h1 class="text-2xl mb-4">Population — carte par département</h1>

  <form class="flex flex-wrap gap-4 items-end mb-4">
    <label class="flex flex-col gap-1">
      <span>Année</span>
      <select id="periode" class="px-3 py-2 rounded border">
        {periodes.map(p => <option value={p} selected={p===defaultYear}>{p}</option>)}
      </select>
    </label>

    <label class="flex flex-col gap-1">
      <span>Sexe</span>
      <select id="sexe" class="px-3 py-2 rounded border">
        {sexes.map(s => <option value={s} selected={s===defaultSex}>{s}</option>)}
      </select>
    </label>

    <label class="flex flex-col gap-1">
      <span>Âge</span>
      <select id="age" class="px-3 py-2 rounded border">
        {ages.map(a => <option value={a} selected={a===defaultAge}>{a}</option>)}
      </select>
    </label>
  </form>

  <div id="carte" class="rounded-xl overflow-hidden border min-h-[560px]"></div>

  <script type="module">
    import * as Plot from "@observablehq/plot";
    import { toWgs84 } from "@turf/projection";

    import detailPopRaw from "../assets/detail_pop.json";
    import geoRaw from "../assets/departementsGeoJSON.json";

    const data = detailPopRaw.map(d => ({
      Période: +d["Période"],
      Valeur:  +d["Valeur"] || 0,
      Sexe:    String(d["Sexe"] ?? "").trim(),
      Âge:     String(d["Âge"] ?? "").trim(),
      Géographie: String(d["Géographie"] ?? "").trim(),
    }));

    const geoSrc = geoRaw?.type ? geoRaw : { type:"FeatureCollection", features:Array.isArray(geoRaw)?geoRaw:[] };

    
    let geo = geoSrc;
    try { geo = toWgs84(geoSrc); } catch(e) { /* ignore, c'est déjà OK */ }

    const getDeptName = f => f?.properties?.nom ?? f?.properties?.NOM ?? f?.properties?.name ?? "";

    const $carte   = document.querySelector("#carte");
    const $periode = document.querySelector("#periode");
    const $sexe    = document.querySelector("#sexe");
    const $age     = document.querySelector("#age");

    const fmt = new Intl.NumberFormat("fr-FR");

    const valeurPour = (dept, year, sex, age) => {
      const row = data.find(p =>
        p.Géographie === dept && p.Période === year && p.Sexe === sex && p["Âge"] === String(age)
      );
      return row ? row.Valeur : 0;
    };

    function render() {
      const year = +$periode.value;
      const sex  = $sexe.value;
      const age  = $age.value;

      $carte.innerHTML = "";

      const values = geo.features.map(f => valeurPour(getDeptName(f), year, sex, age));
      const allZero = values.every(v => v === 0);

      const plot = Plot.plot({
        title: `Population ${year} — ${sex} / ${age}`,
        ariaLabel: "Carte choroplèthe de la population par département",
        height: 560,
        projection: { type: "mercator", domain: geo },
        color: allZero
          ? { legend: false }
          : {
              type: "quantile",
              n: 8,
              scheme: "blues",
              label: "Population (×10⁵)",
              legend: true,
              transform: d => Math.round(d / 100_000)
            },
        marks: [
          Plot.geo(geo, {
            fill: f => valeurPour(getDeptName(f), year, sex, age),
            title: f => {
              const nom = getDeptName(f);
              const v = valeurPour(nom, year, sex, age);
              return `${nom} : ${fmt.format(v)}`;
            },
            tip: true
          }),
          Plot.geo(geo, { stroke: "#64748b", strokeOpacity: 0.9 })
        ]
      });

      $carte.append(plot);
    }

    $periode.addEventListener("change", render);
    $sexe.addEventListener("change", render);
    $age.addEventListener("change", render);
    render();
  </script>
</Layout>
